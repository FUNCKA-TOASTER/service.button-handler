import random
from toaster.broker.events import Event
from toaster.keyboards import Keyboard, ButtonColor, Callback
from data import TOASTER_DB
from data import (
    UserPermission,
    SettingDestination,
    SettingStatus,
    PeerMark,
)
from data.scripts import (
    get_peer_mark,
    set_peer_mark,
    drop_peer_mark,
    update_peer_data,
    get_user_permission,
    set_user_permission,
    drop_user_permission,
    get_destinated_settings,
    update_setting_status,
)
from .base import BaseAction


# ------------------------------------------------------------------------
class Error(BaseAction):
    NAME = "error"

    def _handle(self, event: Event) -> bool:
        snackbar_message = "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫."
        self.snackbar(event, snackbar_message)

        return False


class RejectAccess(BaseAction):
    NAME = "reject_access"

    def _handle(self, event: Event) -> bool:
        snackbar_message = "‚ö†Ô∏è –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ."
        self.snackbar(event, snackbar_message)

        return False


class CloseMenu(BaseAction):
    NAME = "close_menu"

    def _handle(self, event: Event) -> bool:
        self.api.messages.delete(
            peer_id=event.peer.bpid,
            cmids=event.button.cmid,
            delete_for_all=1,
        )

        snackbar_message = "‚ùå –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ."
        self.snackbar(event, snackbar_message)

        # TODO: –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –º–µ–Ω—é –∏–∑ –ë–î

        return True


# ------------------------------------------------------------------------
class SetMark(BaseAction):
    NAME = "set_mark"

    def _handle(self, event: Event) -> bool:
        mark = get_peer_mark(
            db_instance=TOASTER_DB,
            bpid=event.peer.bpid,
        )

        if mark is None:
            payload = event.button.payload
            mark = PeerMark(payload.get("mark"))

            set_peer_mark(
                db_instance=TOASTER_DB,
                mark=mark,
                bpid=event.peer.bpid,
                name=event.peer.name,
            )
            snackbar_message = f'üìù –ë–µ—Å–µ–¥–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ "{mark.name}".'

        else:
            snackbar_message = f'‚ùó–ë–µ—Å–µ–¥–∞ —É–∂–µ –∏–º–µ–µ—Ç –º–µ—Ç–∫—É "{mark.name}".'

        self.snackbar(event, snackbar_message)

        return True


class UpdatePeerData(BaseAction):
    NAME = "update_peer_data"

    def _handle(self, event: Event) -> bool:
        mark = get_peer_mark(
            db_instance=TOASTER_DB,
            bpid=event.peer.bpid,
        )

        if mark is not None:
            update_peer_data(
                db_instance=TOASTER_DB,
                bpid=event.peer.bpid,
                name=event.peer.name,
            )
            snackbar_message = "üìù –î–∞–Ω–Ω—ã–µ –±–µ—Å–µ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã."

        else:
            snackbar_message = "‚ùó–ë–µ—Å–µ–¥–∞ –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–∫—É."

        self.snackbar(event, snackbar_message)

        return True


class DropMark(BaseAction):
    NAME = "drop_mark"

    def _handle(self, event: Event) -> bool:
        mark = get_peer_mark(
            db_instance=TOASTER_DB,
            bpid=event.peer.bpid,
        )

        if mark is not None:
            drop_peer_mark(
                db_instance=TOASTER_DB,
                bpid=event.peer.bpid,
            )
            snackbar_message = f'üìù –ú–µ—Ç–∫–∞ "{mark.name}" —Å–Ω—è—Ç–∞ —Å –±–µ—Å–µ–¥—ã.'

        else:
            snackbar_message = "‚ùó–ë–µ—Å–µ–¥–∞ –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–∫—É."

        self.snackbar(event, snackbar_message)

        return True


# ------------------------------------------------------------------------
class SetPermission(BaseAction):
    NAME = "set_permission"

    def _handle(self, event: Event) -> bool:
        payload = event.button.payload
        target_uuid = payload.get("target")

        current_permission = get_user_permission(
            db_instance=TOASTER_DB,
            uuid=target_uuid,
            bpid=event.peer.bpid,
        )
        new_permission = UserPermission(int(payload.get("permission")))

        if current_permission == UserPermission.user:
            set_user_permission(
                db_instance=TOASTER_DB,
                uuid=target_uuid,
                bpid=event.peer.bpid,
                lvl=new_permission,
            )
            snackbar_message = f'‚öíÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å "{new_permission.name}".'
            self.snackbar(event, snackbar_message)
            return True

        else:
            snackbar_message = (
                f'‚ùó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å "{current_permission.name}".'
            )
            self.snackbar(event, snackbar_message)
            return False


class DropPermission(BaseAction):
    NAME = "drop_permission"

    def _handle(self, event: Event) -> bool:
        payload = event.button.payload
        target_uuid = payload.get("target")

        current_permission = get_user_permission(
            db_instance=TOASTER_DB,
            uuid=target_uuid,
            bpid=event.peer.bpid,
            ignore_staff=True,
        )

        if current_permission != UserPermission.user:
            drop_user_permission(
                db_instance=TOASTER_DB,
                uuid=target_uuid,
                bpid=event.peer.bpid,
            )
            snackbar_message = "‚öíÔ∏è –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω–∞."
            self.snackbar(event, snackbar_message)
            return True

        else:
            snackbar_message = "‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–∏."
            self.snackbar(event, snackbar_message)
            return False


# ------------------------------------------------------------------------
class GameRoll(BaseAction):
    NAME = "game_roll"
    EMOJI = ["0Ô∏è‚É£", "1Ô∏è‚É£", " 2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"]

    def _handle(self, event: Event) -> bool:
        num = random.randint(0, 100)
        result = ""
        for didgit in str(num):
            result += self.EMOJI[int(didgit)]

        tag = f"[id{event.user.uuid}|{event.user.name}]"
        new_msg_text = f"{tag} –≤—ã–±–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ: {result}"

        keyboard = (
            Keyboard(inline=True, one_time=False, owner_id=event.user.uuid)
            .add_row()
            .add_button(
                Callback(label="–°–∫—Ä—ã—Ç—å", payload={"action_name": "close_menu"}),
                ButtonColor.SECONDARY,
            )
        )

        self.api.messages.edit(
            peer_id=event.peer.bpid,
            conversation_message_id=event.button.cmid,
            message=new_msg_text,
            keyboard=keyboard.json,
        )

        snackbar_message = "üé≤ –†—É–ª–µ—Ç–∫–∞ –ø—Ä–æ–∫—Ä—É—á–µ–Ω–∞!"
        self.snackbar(event, snackbar_message)

        # TODO: –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –º–µ–Ω—é

        return True


class GameCoinflip(BaseAction):
    NAME = "game_coinflip"
    EMOJI = ["–û—Ä—ë–ª ü™ô", "–†–µ—à–∫–∞ ü™ô"]

    def _handle(self, event: Event) -> bool:
        num = random.randint(0, 1)
        result = self.EMOJI[num]

        tag = f"[id{event.user.uuid}|{event.user.name}]"
        new_msg_text = f"{tag} –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º–æ–Ω–µ—Ç–∫—É: {result}"

        keyboard = (
            Keyboard(inline=True, one_time=False, owner_id=event.user.uuid)
            .add_row()
            .add_button(
                Callback(label="–°–∫—Ä—ã—Ç—å", payload={"action_name": "close_menu"}),
                ButtonColor.SECONDARY,
            )
        )

        self.api.messages.edit(
            peer_id=event.peer.bpid,
            conversation_message_id=event.button.cmid,
            message=new_msg_text,
            keyboard=keyboard.json,
        )

        snackbar_message = "üé≤ –ú–æ–Ω–µ—Ç–∞ –±—Ä–æ—à–µ–Ω–∞!"
        self.snackbar(event, snackbar_message)

        # TODO: –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –º–µ–Ω—é

        return True


# ------------------------------------------------------------------------
class SystemsSettings(BaseAction):
    NAME = "systems_settings"

    def _handle(self, event: Event) -> bool:
        payload = event.button.payload

        systems = get_destinated_settings(
            db_instance=TOASTER_DB,
            destination=SettingDestination.system,
            bpid=event.peer.bpid,
        )
        color_by_status = {
            SettingStatus.inactive: ButtonColor.NEGATIVE,
            SettingStatus.active: ButtonColor.POSITIVE,
        }

        page = int(payload.get("page", 1))

        if payload.get("action_context") == "change_status":
            system_name = payload.get("system_name")
            new_status = SettingStatus(not systems[system_name].value)
            systems[system_name] = new_status

            snackbar_message = (
                f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ {'–í–∫–ª—é—á–µ–Ω–∞' if new_status.value else '–í—ã–∫–ª—é—á–µ–Ω–∞'}."
            )
            update_setting_status(
                db_instance=TOASTER_DB,
                status=new_status,
                bpid=event.peer.bpid,
                name=system_name,
            )

        else:
            snackbar_message = f"‚öôÔ∏è –ú–µ–Ω—é —Å–∏—Å—Ç–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ({page}/2)."

        if page == 1:
            keyboard = (
                Keyboard(inline=True, one_time=False, owner_id=event.user.uuid)
                .add_row()
                .add_button(
                    Callback(
                        label=f"–í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: {'–í–∫–ª.' if systems['account_age'].value else '–í—ã–∫–ª.'}",
                        payload={
                            "action_name": "systems_settings",
                            "action_context": "change_status",
                            "system_name": "account_age",
                            "page": "1",
                        },
                    ),
                    color_by_status[systems["account_age"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label=f"–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {'–í–∫–ª.' if systems['curse_words'].value else '–í—ã–∫–ª.'}",
                        payload={
                            "action_name": "systems_settings",
                            "action_context": "change_status",
                            "system_name": "curse_words",
                            "page": "1",
                        },
                    ),
                    color_by_status[systems["curse_words"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label=f"–û—Ç–∫—Ä—ã—Ç–æ–µ –õ–°: {'–í–∫–ª.' if systems['open_pm'].value else '–í—ã–∫–ª.'}",
                        payload={
                            "action_name": "systems_settings",
                            "action_context": "change_status",
                            "system_name": "open_pm",
                            "page": "1",
                        },
                    ),
                    color_by_status[systems["open_pm"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label=f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {'–í–∫–ª.' if systems['slow_mode'].value else '–í—ã–∫–ª.'}",
                        payload={
                            "action_name": "systems_settings",
                            "action_context": "change_status",
                            "system_name": "slow_mode",
                            "page": "1",
                        },
                    ),
                    color_by_status[systems["slow_mode"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label="-->",
                        payload={"action_name": "systems_settings", "page": "2"},
                    ),
                    ButtonColor.SECONDARY,
                )
                .add_row()
                .add_button(
                    Callback(label="–ó–∞–∫—Ä—ã—Ç—å", payload={"action_name": "close_menu"}),
                    ButtonColor.SECONDARY,
                )
            )

        if page == 2:
            keyboard = (
                Keyboard(inline=True, one_time=False, owner_id=event.user.uuid)
                .add_row()
                .add_button(
                    Callback(
                        label=f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è URL: {'–í–∫–ª.' if systems['url_filtering'].value else '–í—ã–∫–ª.'}",
                        payload={
                            "action_name": "systems_settings",
                            "action_context": "change_status",
                            "system_name": "url_filtering",
                            "page": "2",
                        },
                    ),
                    color_by_status[systems["url_filtering"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label=f"–£—Å–∏–ª–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è URL: {'–í–∫–ª.' if systems['hard_url_filtering'].value else '–í—ã–∫–ª.'}",
                        payload={
                            "action_name": "systems_settings",
                            "action_context": "change_status",
                            "system_name": "hard_url_filtering",
                            "page": "2",
                        },
                    ),
                    color_by_status[systems["hard_url_filtering"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label="<--",
                        payload={"action_name": "systems_settings", "page": "1"},
                    ),
                    ButtonColor.SECONDARY,
                )
                .add_row()
                .add_button(
                    Callback(label="–ó–∞–∫—Ä—ã—Ç—å", payload={"action_name": "close_menu"}),
                    ButtonColor.SECONDARY,
                )
            )

        new_msg_text = "‚öôÔ∏è –í–∫–ª—é—á–µ–Ω–∏–µ\\–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏:"
        self.api.messages.edit(
            peer_id=event.peer.bpid,
            conversation_message_id=event.button.cmid,
            message=new_msg_text,
            keyboard=keyboard.json,
        )
        self.snackbar(event, snackbar_message)

        return True


class FiltersSettings(BaseAction):
    NAME = "filters_settings"

    def _handle(self, event: Event) -> bool:
        payload = event.button.payload

        filters = get_destinated_settings(
            db_instance=TOASTER_DB,
            destination=SettingDestination.filter,
            bpid=event.peer.bpid,
        )
        color_by_status = {
            SettingStatus.inactive: ButtonColor.NEGATIVE,
            SettingStatus.active: ButtonColor.POSITIVE,
        }

        page = int(payload.get("page", 1))

        if payload.get("action_context") == "change_status":
            filter_name = payload.get("filter_name")
            new_status = SettingStatus(not filters[filter_name].value)
            filter_name[filter_name] = new_status

            snackbar_message = (
                f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ {'–í–∫–ª—é—á–µ–Ω–∞' if not new_status.value else '–í—ã–∫–ª—é—á–µ–Ω–∞'}."
            )
            update_setting_status(
                db_instance=TOASTER_DB,
                status=new_status,
                bpid=event.peer.bpid,
                name=filter_name,
            )

        else:
            snackbar_message = f"‚öôÔ∏è –ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π ({page}/4)."

        if page == 1:
            keyboard = (
                Keyboard(inline=True, one_time=False, owner_id=event.user.uuid)
                .add_row()
                .add_button(
                    Callback(
                        label=f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {'–í—ã–∫–ª.' if filters['app_action'].value else '–í–∫–ª.'}",
                        payload={
                            "action_name": "filters_settings",
                            "action_context": "change_status",
                            "filter_name": "app_action",
                            "page": "1",
                        },
                    ),
                    color_by_status[filters["app_action"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label=f"–ú—É–∑—ã–∫–∞: {'–í—ã–∫–ª.' if filters['audio'].value else '–í–∫–ª.'}",
                        payload={
                            "action_name": "filters_settings",
                            "action_context": "change_status",
                            "filter_name": "audio",
                            "page": "1",
                        },
                    ),
                    color_by_status[filters["audio"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label=f"–ê—É–¥–∏–æ: {'–í—ã–∫–ª.' if filters['audio_message'].value else '–í–∫–ª.'}",
                        payload={
                            "action_name": "filters_settings",
                            "action_context": "change_status",
                            "filter_name": "audio_message",
                            "page": "1",
                        },
                    ),
                    color_by_status[filters["audio_message"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label=f"–§–∞–π–ª—ã: {'–í—ã–∫–ª.' if filters['doc'].value else '–í–∫–ª.'}",
                        payload={
                            "action_name": "filters_settings",
                            "action_context": "change_status",
                            "filter_name": "doc",
                            "page": "1",
                        },
                    ),
                    color_by_status[filters["doc"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label="-->",
                        payload={"action_name": "filters_settings", "page": "2"},
                    ),
                    ButtonColor.SECONDARY,
                )
                .add_row()
                .add_button(
                    Callback(label="–ó–∞–∫—Ä—ã—Ç—å", payload={"action_name": "close_menu"}),
                    ButtonColor.SECONDARY,
                )
            )

        elif page == 2:
            keyboard = (
                Keyboard(inline=True, one_time=False, owner_id=event.user.uuid)
                .add_row()
                .add_button(
                    Callback(
                        label=f"–ü–µ—Ä–µ—Å—ã–ª: {'–í—ã–∫–ª.' if filters['forward'].value else '–í–∫–ª.'}",
                        payload={
                            "action_name": "filters_settings",
                            "action_context": "change_status",
                            "filter_name": "forward",
                            "page": "2",
                        },
                    ),
                    color_by_status[filters["forward"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label=f"–û—Ç–≤–µ—Ç: {'–í—ã–∫–ª.' if filters['reply'].value else '–í–∫–ª.'}",
                        payload={
                            "action_name": "filters_settings",
                            "action_context": "change_status",
                            "filter_name": "reply",
                            "page": "2",
                        },
                    ),
                    color_by_status[filters["reply"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label=f"–ì—Ä–∞—Ñ—Ñ–∏—Ç–∏: {'–í—ã–∫–ª.' if filters['graffiti'].value else '–í–∫–ª.'}",
                        payload={
                            "action_name": "filters_settings",
                            "action_context": "change_status",
                            "filter_name": "graffiti",
                            "page": "2",
                        },
                    ),
                    color_by_status[filters["graffiti"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label=f"–°—Ç–∏–∫–µ—Ä—ã: {'–í—ã–∫–ª.' if filters['sticker'].value else '–í–∫–ª.'}",
                        payload={
                            "action_name": "filters_settings",
                            "action_context": "change_status",
                            "filter_name": "sticker",
                            "page": "2",
                        },
                    ),
                    color_by_status[filters["sticker"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label="<--",
                        payload={"action_name": "filters_settings", "page": "1"},
                    ),
                    ButtonColor.SECONDARY,
                )
                .add_button(
                    Callback(
                        label="-->",
                        payload={"action_name": "filters_settings", "page": "3"},
                    ),
                    ButtonColor.SECONDARY,
                )
                .add_row()
                .add_button(
                    Callback(label="–ó–∞–∫—Ä—ã—Ç—å", payload={"action_name": "close_menu"}),
                    ButtonColor.SECONDARY,
                )
            )

        elif page == 3:
            keyboard = (
                Keyboard(inline=True, one_time=False, owner_id=event.user.uuid)
                .add_row()
                .add_button(
                    Callback(
                        label=f"–õ–∏–Ω–∫–∏: {'–í—ã–∫–ª.' if filters['link'].value else '–í–∫–ª.'}",
                        payload={
                            "action_name": "filters_settings",
                            "action_context": "change_status",
                            "filter_name": "link",
                            "page": "3",
                        },
                    ),
                    color_by_status[filters["link"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {'–í—ã–∫–ª.' if filters['photo'].value else '–í–∫–ª.'}",
                        payload={
                            "action_name": "filters_settings",
                            "action_context": "change_status",
                            "filter_name": "photo",
                            "page": "3",
                        },
                    ),
                    color_by_status[filters["photo"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label=f"–û–ø—Ä–æ—Å—ã: {'–í—ã–∫–ª.' if filters['poll'].value else '–í–∫–ª.'}",
                        payload={
                            "action_name": "filters_settings",
                            "action_context": "change_status",
                            "filter_name": "poll",
                            "page": "3",
                        },
                    ),
                    color_by_status[filters["poll"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label=f"–í–∏–¥–µ–æ: {'–í—ã–∫–ª.' if filters['video'].value else '–í–∫–ª.'}",
                        payload={
                            "action_name": "filters_settings",
                            "action_context": "change_status",
                            "filter_name": "video",
                            "page": "3",
                        },
                    ),
                    color_by_status[filters["video"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label="<--",
                        payload={"action_name": "filters_settings", "page": "2"},
                    ),
                    ButtonColor.SECONDARY,
                )
                .add_button(
                    Callback(
                        label="-->",
                        payload={"action_name": "filters_settings", "page": "4"},
                    ),
                    ButtonColor.SECONDARY,
                )
                .add_row()
                .add_button(
                    Callback(label="–ó–∞–∫—Ä—ã—Ç—å", payload={"action_name": "close_menu"}),
                    ButtonColor.SECONDARY,
                )
            )

        elif page == 4:
            keyboard = (
                Keyboard(inline=True, one_time=False, owner_id=event.user.uuid)
                .add_row()
                .add_button(
                    Callback(
                        label=f"–ó–∞–ø–∏—Å–∏: {'–í—ã–∫–ª.' if filters['wall'].value else '–í–∫–ª.'}",
                        payload={
                            "action_name": "filters_settings",
                            "action_context": "change_status",
                            "filter_name": "wall",
                            "page": "4",
                        },
                    ),
                    color_by_status[filters["wall"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label=f"–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è: {'–í—ã–∫–ª.' if filters['geo'].value else '–í–∫–ª.'}",
                        payload={
                            "action_name": "filters_settings",
                            "action_context": "change_status",
                            "filter_name": "geo",
                            "page": "4",
                        },
                    ),
                    color_by_status[filters["geo"]],
                )
                .add_row()
                .add_button(
                    Callback(
                        label="<--",
                        payload={"action_name": "filters_settings", "page": "3"},
                    ),
                    ButtonColor.SECONDARY,
                )
                .add_row()
                .add_button(
                    Callback(label="–ó–∞–∫—Ä—ã—Ç—å", payload={"action_name": "close_menu"}),
                    ButtonColor.SECONDARY,
                )
            )

        new_msg_text = "‚öôÔ∏è –í–∫–ª—é—á–µ–Ω–∏–µ\\–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π:"
        self.api.messages.edit(
            peer_id=event.peer.bpid,
            conversation_message_id=event.button.cmid,
            message=new_msg_text,
            keyboard=keyboard.json,
        )

        self.snackbar(event, snackbar_message)

        return True


# ------------------------------------------------------------------------
